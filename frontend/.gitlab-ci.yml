variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  OUTPUT_NAME: momo-store #tar.gz name

stages:
  - build
  - quality-testing
  - build-image
  - release
  - deploy

build:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
    - mkdir -p momo-store-${VERSION}/public_html
    - mv dist/* momo-store-${VERSION}/public_html
  artifacts:
    paths:
      - frontend/momo-store-${VERSION}/public_html

sonarqube-check:
  stage: quality-testing
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -X -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT} -Dsonar.sources=. -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_FRONTEND_TOKEN} -Dsonar.projectName="MOMO-STORE-FRONTEND"
  dependencies:
    - build
  allow_failure: true

build-image:
  stage: build-image
  image: docker:20.10.16
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:20.10.16-dind
  tags:
    - my-runner #personal runner
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=${VERSION}
      --tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA
  dependencies:
    - build

#release image to gitlab registry
upload-image-latest:
  stage: release
  image: docker:20.10.16
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    GIT_STRATEGY: none
  services:
    - docker:20.10.16-dind
  tags:
    - my-runner #personal runner
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:latest


deploy:
  stage: deploy
  image: alpine:3.15.0
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod 700 /tmp
  script:
    - scp ./docker-compose.yml  ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
    - ssh ${DEV_USER}@${DEV_HOST}
      "/bin/bash -s " < ./frontend/deploy_app.sh

deploy-cluster:
  stage: deploy
  needs:
    - upload-image-latest
  script:
    - "curl -X POST --fail --form token=${INFRA_TRIGGER_TOKEN} --form ref=develop https://gitlab.praktikum-services.ru/api/v4/projects/${INFRA_PROJECT_ID}/trigger/pipeline"

upload-release:
  stage: release
  only:
    changes:
      - frontend/*
  script:
    - cd ${CI_PROJECT_DIR}/frontend
    - tar czvf ${OUTPUT_NAME}-${VERSION}.tar.gz momo-store-${VERSION}
    - >
      curl -v -u  "${NEXUS_AUTH}" --upload-file ${OUTPUT_NAME}-${VERSION} "https://${NEXUS_SERVER}/repository/${NEXUS_REPO_FRONT}/${VERSION}/${OUTPUT_NAME}-${VERSION}.tar.gz"
